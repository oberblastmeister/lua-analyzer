initSidebarItems({"enum":[["Expr",""],["ForContent",""],["FunctionDefContent",""],["LiteralKind",""],["Stmt",""],["StmtItem",""],["TableContent",""],["TableKey",""]],"struct":[["ArgList",""],["AssignStmt",""],["AstChildren","An iterator over `SyntaxNode` children of a particular AST type."],["Block",""],["BreakStmt",""],["CallArgs",""],["CallExpr",""],["Comment",""],["DoStmt",""],["DotExpr",""],["ElseBranch",""],["ElseIfBranch",""],["Error",""],["ExprStmt",""],["False",""],["ForStmt",""],["FunctionDefStmt",""],["FunctionExpr",""],["FunctionMethod",""],["FunctionStatic",""],["GenericFor",""],["GotoStmt",""],["Ident",""],["IdentKey",""],["IfStmt",""],["Index",""],["IndexExpr",""],["IndexPath",""],["InfixExpr",""],["KeyValue",""],["LabelDelim",""],["LabelStmt",""],["Literal",""],["LocalAssignStmt",""],["LocalFunctionDefStmt",""],["MethodCallExpr",""],["MultiName",""],["MultivalExpr",""],["Name",""],["NameRef",""],["Number",""],["NumericFor",""],["ParamList",""],["ParenExpr",""],["PositionalValue",""],["PrefixExpr",""],["RepeatUntilStmt",""],["ReturnStmt",""],["Shebang",""],["SourceFile",""],["Str",""],["TableExpr",""],["TableSep",""],["True",""],["WhileStmt",""],["Whitespace",""]],"trait":[["AstNode","The main trait to go from untyped `SyntaxNode`  to a typed ast. The conversion itself has zero runtime cost: ast and syntax nodes have exactly the same representation: a pointer to the tree root and a pointer to the node itself."],["AstToken","Like `AstNode`, but wraps tokens rather than interior nodes."]]});