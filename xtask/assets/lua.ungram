Program = 
  Stmt*

Stmt =
  AssignStmt
  | LocalAssignStmt
  | FunctionDefStmt
  | ForStmt
  | IfStmt
  | ReturnStmt
  | WhileStmt
  | ExprStmt
  | BreakStmt
  | LabelStmt
  | RepeatUntilStmt

Expr =
  Literal
  | TableExpr
  | InfixExpr
  | PrefixExpr
  | IndexExpr
  | DotExpr
  | FunctionExpr
  | CallExpr
  | TableCallExpr
  | StringCallExpr
  | MethodCallExpr

CallExpr =
  fun:Expr '(' (args:Expr)? ')'

TableCallExpr =
  fun:Expr tbl:TableExpr

StringCallExpr =
  fun:Expr 'str'

MethodCallExpr =
  fun:Expr ':' NameRef '(' (args:Expr)? ')'

MultivalExpr =
  Expr (',' Expr)*

Arglist =
  '(' args:(Expr (',' Expr)*)? ')'

Literal =
  'number'
  | 'str'
  | 'true'
  | 'false'

FunctionExpr =
  'function'
  params:Paramlist
  body:Block
  'end'

TableExpr =
  '{'
  (TableContent (',' TableContent)* ','?)
  '}'

DotExpr =
  Expr '.' 'ident'

ParenExpr =
  '('
  Expr
  ')'

TableContent =
  KeyValue
  | PositionalValue

PositionalValue =
  Expr

KeyValue =
  key:TableKey value:Expr
  
TableKey =
  Index
  | IdentKey

Index =
  '[' index:Expr ']'

IdentKey =
  'ident'

InfixExpr =
  lhs:Expr
  op:('^' | '*' | '/' | '+' | '-' | '..' | '<' | '>' | '<=' | '>=' | '~=' | '==' | 'and' | 'or')
  rhs:Expr

PrefixExpr =
  op:('not' | '-') Expr

IndexExpr =
  base:Expr Index

LabelStmt =
  start:LabelDelim Name finish:LabelDelim

LabelDelim =
  '::'

GotoStmt =
  'goto' NameRef

BreakStmt =
  'break'

DoStmt =
  'do'
  body:Block
  'end'

FunctionDefStmt =
  'local'? 'function' Name Paramlist
  body:Block
  'end'

Paramlist =
  '('
  MultiName?
  ')'

ExprStmt = MultivalExpr

IfStmt =
  'if'
  cond:Expr
  'then'
  Block
  (ElseBranch | ElseIfBranch)?
  'end'

ElseBranch =
  'else'
  Block

ElseIfBranch =
  'elseif'
  cond:Expr
  'then'
  Block
  (ElseIfBranch | ElseBranch)?

WhileStmt =
  'while'
  cond:Expr
  'do'
  body:Block
  'end'

ReturnStmt =
  'return'
  expr:Expr

ForStmt =
  'for' content:ForContent 'do' Block 'end'

ForContent =
  NumericFor
  | GenericFor

NumericFor =
  Name
  '='
  expr:MultivalExpr

GenericFor =
  multi_name:MultiName
  'in'
  expr:MultivalExpr
  
Block =
  Stmt*

RepeatUntilStmt =
  'repeat'
  Block
  'until'
  Expr
  
Name =
  'ident'

NameRef =
  'ident'

LocalAssignStmt =
  'local' MultiName ('=' MultivalExpr)?

AssignStmt =
  lhs:MultivalExpr ('=' rhs:MultivalExpr)?

MultiName =
  Name (',' Name)*

// vim: set shiftwidth=2
