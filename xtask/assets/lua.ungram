Program = 
  Stmt*

Stmt =
  AssignStmt
  | FunctionStmt
  | ForStmt
  | IfStmt

Expr =
  LitExpr
  | TableExpr
  | InfixExpr
  | PrefixExpr
  | IndexExpr
  | DotExpr

LitExpr =
  'number'
  | 'string'
  | 'true'
  | 'false'

TableExpr =
  '{'
  (TableContent (',' TableContent)* ','?)
  '}'

DotExpr =
    Expr '.' Name

TableContent =
  KeyValue
  | TableItem

TableItem =
  Expr

KeyValue =
  key:TableKey value:Expr
  
TableKey =
  IndexKey
  | LiteralKey

IndexKey =
  '[' index:Expr ']'

LiteralKey =
  'ident'

InfixExpr =
  lhs:Expr
  op:InfixOp
  rhs:Expr

InfixOp =
  '+' | '-' | '/' | '*' | '==' | '~='

PrefixExpr =
  '!' Expr

IndexExpr =
  base:Expr '[' index:Expr ']'

FunctionStmt =
  'local'? 'function' Name

Parameters =
  '('
  (Name (',' Name)*)
  // (TableContent (',' TableContent)* ','?)
  ')'

IfStmt =
  'if'
  cond:Expr
  'then'
  body:Body
  'end'

WhileStmt =
  'while'
  cond:Expr
  'then'
  body:Body
  'end'

ForStmt =
  'for' ForContent 'do' body:Body 'end'

ForContent =
  NumericFor
  | GenericFor

NumericFor =
  'ident' '='
  start:Expr ','
  end:Expr (',' inc:Expr)?

GenericFor =
  pat:Pat
  'in'
  expr:Expr
  

Body =
  Stmt*
  
Name =
  'ident'

AssignStmt =
  'local'? Pat '=' 

Pat =
  Name (',' Name)*

// vim: set shiftwidth=2
